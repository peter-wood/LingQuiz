'use strict';

/* Controllers */

angular.module('myApp.quizstuff', [])
    .controller('QuizzesCtrl', ['$scope', '$http', '$state', '$rootScope', function($scope, $http, $state, $rootScope) {
        if ($scope.clicked === true) return;
        console.log('QuizzesCtrl called');
        $scope.clicked = true;

        $scope.goto = function(state) {
            console.log('goto: ', state);
            $rootScope.currentQuiz = state;
            $state.go('quiz');
        }

		$scope.list = false;
		$scope.valid = false;
		$scope.result = null;

        $http.jsonp(encodeURI('@@nodeserver@@:@@nodeport@@/quizzes_res?callback=JSON_CALLBACK'))
         .success(function(data, status, headers, config) {
             if (data.result === -1) {
                console.log('got an error');
                $scope.list = false;
                $scope.valid=false;
             return;
             } else {
                console.log('got data: %s', JSON.stringify(data.result));
                $scope.valid=true;
                $scope.list=true;
                $scope.result = data.result;
                $scope.take = [];
                $scope.resume = [];
                $scope.review = [];
                $scope.submitted = [];
                for (var x = 0; x < $scope.result.length; ++x) {
                    var current = $scope.result[x];
                    if (current.started) {
                        console.log(current.started, current.time);
                        current.limit = new Date(Date.parse(current.started) + (current.time * 60 * 1000)); 
                    }
                    if (!current.completed && !current.started && current.open) {
                        $scope.take.push(current);
                    } else 
                    if (!current.completed && current.started && current.canResume) {
                        $scope.resume.push(current);
                    } else 
                    if (current.completed && current.canReview) {
                        $scope.review.push(current);
                    } else 
                    if (current.completed && !current.canReview) {
                        $scope.submitted.push(current);
                    }
                 }
             }
         });
     }])

    .controller('ModalInstanceCtrl', ['$scope', '$modalInstance',  function ($scope, $modalInstance) {
        $scope.closeImage = function () {
            $modalInstance.dismiss();
        };
    }])

    .controller('SubmitCtrl', ['$scope', '$modalInstance', function($scope, $modalInstance) {
        $scope.okSubmit = function() {
            $modalInstance.close('ok');
        };
        $scope.cancelSubmit = function() {
            $modalInstance.dismiss();
        };
    }])

    .controller('QuizCtrl', ['$state', '$scope', '$modal', '$stateParams', '$http', '$rootScope', '$interval', '$timeout', 
        function($state, $scope, $modal, $stateParams, $http, $rootScope, $interval, $timeout) {

        var getQuestions = function() {
            if ($scope.loaded == true) {
                console.log('questions already loaded');
                return;
            }
            $scope.loaded = true;
            var data = {};
            data.index = $rootScope['currentQuiz']['index'];
            $http.jsonp('@@nodeserver@@:@@nodeport@@/getset?data=' 
                + encodeURIComponent(JSON.stringify(data)) 
                +'&callback=JSON_CALLBACK')
                .success(function(QuizRecord) {
                    if (QuizRecord.result === -1) {
                        console.log('got invalid result');
                        $scope.valid = false;
                        return;
                    } else {
                        console.log('got quesions: ', QuizRecord);
                        $scope.valid = true;
                        $scope.questions = QuizRecord;
                        $scope.numQuestions = $rootScope['currentQuiz']['numQuestions'];
                        updateView();
                        if ($scope.review) $scope.nextQuestion(0);
                    }
                });
        }

        

        var updateView = function() {
            $scope.gotRight = 0;
            $scope.answered = 0; 
            for (var x = 0; x < $scope.numQuestions; ++x) {
                if ($scope.questions[x]['correct']) ++ $scope.gotRight;
                if ($scope.questions[x]['answer'] > 0) ++$scope.answered;
            }
            if ($scope.gotRight === $scope.numQuestions) {
                $scope.alerts.push({'msg': 'Well done. You answered all the questions correctly.', 'type': 'success'});
                $scope.stop('complete');
            }
        }

        $scope.resetQuestions = function() {
            var data = {}
            data.index = $rootScope['currentQuiz']['index'];
            if ($scope.canRetake) {
                console.log('calling reset: ', data);
                $http.jsonp('@@nodeserver@@:@@nodeport@@/resetQuestions?data=' 
                + encodeURIComponent(JSON.stringify(data)) 
                +'&callback=JSON_CALLBACK')
                .success(function(upRes) {
                    if(upRes.data != 1) {
                        console.log('something went wrong updating answers');
                        return;
                    } else { 
                        console.log('questions reset ', upRes);
                        $state.go('quizzes');
                    }
                });
            }
        }

        var updateUserDb = function() {
            var data = {}
            data.index = $rootScope['currentQuiz']['index'];
            data.number = $scope.currentIndex;
            data.answer = $scope.questions[$scope.currentIndex]["answer"];
            console.log('calling update: ', data);
            $http.jsonp('@@nodeserver@@:@@nodeport@@/update?data=' 
                + encodeURIComponent(JSON.stringify(data)) 
                +'&callback=JSON_CALLBACK')
                .success(function(upRes) {
                    if(upRes.data.updated != 1) {
                        console.log('something went wrong updating answers');
                        $scope.alerts.push({'msg': 'Authentication problem. Log in and resume the quiz.', 'type': 'danger'});
                        $scope.noConnection = true;
                        return;
                    } else { 
                        $scope.noConnection = false;
                        console.log('answer updated', upRes);
                        $scope.questions[$scope.currentIndex]['correct'] = upRes.data.correct;
                        updateView();
                    }
                })
	        .error(function(e) {
			console.log('error updating. code: ', e);
                        $scope.alerts.push({'msg': 'Connection problem. Cannot save your answer.', 'type': 'danger'});
                        $scope.noConnection = true;
		}) ;
        }


        $scope.nextQuestion = function(direction) {
            if($scope.noConnection) return;
            console.log('nextQuestion called with: ', direction);
            $scope.start = false;
            $scope.next = true;
            $scope.back = true;
            if (direction === '+') ++$scope.currentIndex;
            if (direction === '-') --$scope.currentIndex;
            if ($scope.currentIndex === ($scope.questions.length - 1)) {
                $scope.next = false;
            }
            if ($scope.currentIndex <= 0) {
                $scope.currentIndex = 0;
                $scope.back = false;
            }
            var data = $scope.questions[$scope.currentIndex];
            $http.jsonp('@@nodeserver@@:@@nodeport@@/getNext?data=' 
                + encodeURIComponent(JSON.stringify(data)) 
                +'&callback=JSON_CALLBACK')
                    .error(function(err) {
                       $scope.alerts.push({'msg': 'Connection problem. Reconnect to the internet and resume quiz.', 'type': 'danger'});
                       $scope.noConnection = true;
                       console.log('Error in getNext: ', err);
                     })
                    .success(function(nextRes) {
                        if(nextRes.data === -1) {
                            $scope.alerts.push({'msg': 'Connection problem. Reconnect to internet and resume quiz.', 'type': 'danger'});
                            $scope.noConnection = true;
                            console.log('something went wrong in getNext');
                            return;
                        } else { 
                            $scope.noConnection=false;
                            console.log('getNext Success');
                            $scope.myQuestion = nextRes['data'];
                            var cEmpty = 'list-group-item ng-binding ng-scope';
                            var cAnswered = 'list-group-item ng-binding ng-scope list-group-item-info';
                            var cCorrect = 'list-group-item ng-binding ng-scope list-group-item-success';
                            var cWrong = 'list-group-item ng-binding ng-scope list-group-item-danger';
                            var answer = $scope.myQuestion['answer'];
                            var correct = $scope.myQuestion['correct'];
                            var rightAnswer = $scope.myQuestion['rightAnswer'];
                            $timeout(function() {
                              for(var x = 1; x < 6; ++x) {
                                  try {
                                  if (answer === x) {
                                      document.getElementById('b' + x.toString()).className = cAnswered;
                                  } else {
                                      document.getElementById('b' + x.toString()).className = cEmpty;
                                  }
                                  } catch(e) {
                                  console.log('some element does not exist');
                                  }
                              }
                              if ($scope.review) {
                                  for(var x = 1; x < 6; ++x) {
                                      try {
                                      if ((answer === x) && (rightAnswer != answer)) {
                                          document.getElementById('b' + x.toString()).className = cWrong;
                                      }
                                      if (rightAnswer === x) {
                                          document.getElementById('b' + x.toString()).className = cCorrect;
                                      }
                                      } catch(e) {
                                      console.log('some element does not exist.');
                                      }
                                  }
                              }             
                            }, 100);
                        }
                    });
        }

        $scope.closeAlert = function(index) {
	        $scope.alerts.splice(index,1);
        }
      
        var promise = undefined;

        $scope.startQuiz = function() {
           if ($scope.hasStarted) {
                return;
           }
           $scope.hasStarted = true;
           $scope.alerts = [];
           $scope.warning = false;
           var myTime = new Date($scope.time * 1000 * 60);
           if ($scope.started === undefined) {
               $scope.timeLeft = myTime;
           } else {
               var limit = Date.parse($scope.started) + Date.parse(myTime); 
               var left = limit - Date.now();
               $scope.timeLeft = new Date(left);
               if ($scope.timeLeft <= 0) {
                    $scope.alerts.push({'msg': 'Sorry, the time expired at ' +
                    new Date(limit), 'type': 'danger'});
                    $scope.disabled = true;
                    if (promise != undefined) {
                        $interval.cancel(promise);
                        promise = undefined;
                    } 
                    return;
               }
           }
           promise = $interval( function() {
                $scope.timeLeft = $scope.timeLeft - 1000;
                if ($scope.timeLeft <= 0) {
                    $scope.alerts.push({'msg': 'The time is up', 'type': 'danger'});
                    $scope.stop('timeOut');
                }
           }, 1000);
           if ($scope.started) { // set started only once
                $scope.nextQuestion(0);
           } else {
               var datenow = new Date();
               console.log('Setting started to: ', datenow);
               var data = {};
               data.index = $rootScope['currentQuiz']['index'];
               data.toMod = [{'key': 'started', 'value': datenow},
                             {'key': 'canResume', 'value': true}];
               $http.jsonp('@@nodeserver@@:@@nodeport@@/modstatus?data=' 
                    + encodeURIComponent(JSON.stringify(data)) 
                    +'&callback=JSON_CALLBACK')
                    .success(function(upRes) {
                        if(upRes.data.updated != 1) {
                            console.log('something went wrong updating answers');
                            return;
                        } else { 
                            console.log('answer updated', upRes);
                            $scope.nextQuestion('0');
                        }
                    });
            }
        }

        $scope.submit = function() {
            console.log('submitting results');
            $scope.stop('submit');
        }

        $scope.stop = function(reason) {
            if ($scope.isStopped) {
                return;
            }
            $scope.isStopped = true;
            $scope.disabled = true;
           if (promise != undefined) {
		        $interval.cancel(promise);
      		    promise = undefined;
	       } 
           if (reason === 'timeOut' || reason === 'submit') {
                var data = {};
                data.index = $rootScope['currentQuiz']['index'];
                data.toMod = [];
                data.toMod.push({'key': 'completed', 'value': true});
                data.toMod.push({'key': 'canResume', 'value': false});
                $http.jsonp('@@nodeserver@@:@@nodeport@@/modstatus?data=' 
                    + encodeURIComponent(JSON.stringify(data)) 
                    +'&callback=JSON_CALLBACK')
                .success(function(upRes) {
                    if(upRes.data.updated != 1) {
                        console.log('something went wrong updating answers');
                        return;
                    } else { 
                        console.log('answer updated', upRes);
                        $scope.alerts.push({'msg': 'All of your answers have been saved.', 'type': 'success'});
                    }
                });
            }
            if ($scope.type === 'practice') {
                $scope.alerts.push({'msg': 'You can go back to the "Quizzes" page and check your results.', 'type': 'info'});
            } else {
                $scope.alerts.push({'msg': 'You can check your results in a few days.', 'type': 'info'});
            }
        }

        $scope.$on('$destroy', function () {
            $scope.stop('destroyed');
        });

        $scope.submission = function(sub) {
            if ($scope.disabled) return; // no more input once timer is stopped
            $scope.questions[$scope.currentIndex]['answer'] = sub;
            var cs = 'list-group-item ng-binding ng-scope';
            var cn = 'list-group-item ng-binding ng-scope list-group-item-info';
            for(var x = 1; x < 6; ++ x) {
            try {
                if (x === sub) {
                    document.getElementById('b' + x.toString()).className = cn;
                } else {
                    document.getElementById('b' + x.toString()).className = cs;
                }
            } catch(e) {
              console.log('some element does not exist');
            }
            }
            updateUserDb();
        }
      
        $scope.open = function () {
            var modalInstance = $modal.open({
                template:  '<div class="modal-header"> <span class="pull-right modal-title"><a ng-click="console.log(1234);closeImage()">' +
                            'Close</a></span></div> <div class="modal-body"><img ng-src="'+
                            $scope.url+$scope.questions[$scope.currentIndex]["resource"] + 
                           '" class="img-responsive" style="display:block;margin-left:auto;margin-right:auto;max-height:600px;"/> </div>',
                controller: 'ModalInstanceCtrl',
                size: 'lg'
            });
        }

        $scope.openConfirm = function() {
            var instance = $modal.open({
                template: '<div class="modal-header"> <h3 class="modal-title">Submit</h3></div><div class="modal-body">' +
                    '<p>If you click "ok" your quiz will be submitted and you will not be able to make any more changes.' +  
                    'If you got here by mistake, click "cancel" and you can continue working on your quiz.</p>' +
                    '</div><div class="modal-footer"><button class="btn btn-primary" ng-click="okSubmit()">OK</button>' +
                    '<button class="btn btn-warning" ng-click="cancelSubmit()">Cancel</button></div>',
                controller: 'SubmitCtrl',
                size: 'md'
                });
            instance.result.then(function(res) { 
                console.log('modal returned: ', res);
                if (res === 'ok') $scope.submit();
            }, function() {
                console.log('submit cancelled');
            });
        }

        var initialize = function() {
            console.log('in init rootscope: ', $rootScope['currentQuiz']);
            if ($rootScope['currentQuiz'] === undefined) {
                $scope.quiz = null;
                $scope.reloadProblem = true;
                $scope.alerts.push({'msg': 'No quiz specified Go back and select a quiz', 'type': 'warning'});
            } else {
                $scope.quiz = $rootScope['currentQuiz']['name'];
                $scope.type = $rootScope['currentQuiz']['type'];
                $scope.completed = $rootScope['currentQuiz']['completed'];
                $scope.canReview = $rootScope['currentQuiz']['canReview'];
                $scope.canResume = $rootScope['currentQuiz']['canResume'];
                $scope.canRetake = $rootScope['currentQuiz']['canRetake'];
                $scope.started = $rootScope['currentQuiz']['started'];
                $scope.time = $rootScope['currentQuiz']['time'];
                if ($scope.completed && $scope.canReview){ 
                    $scope.review = true; 
                    $scope.correctMessage = 'Correct';
                    $scope.disabled = true;
                    $scope.start = false;
                } else {
                    $scope.start = true;
                    $scope.review = false; 
                    $scope.correctMessage = 'Answered';
                }
                if (!$scope.started) $scope.startText = 'Start';
                if ($scope.started) $scope.startText = 'Resume';
                // $scope.alerts.push({'msg': 'Accessing quiz: ' + $scope.quiz, 'type': 'info'});
                getQuestions();
            }
        }


        // main init vars, check if we need to resume, otherwise start a new
        // quiz
        if ($scope.clicked === true) return; // do only run once (event may fire multiple times)
        $scope.clicked = true;
        console.log('QuizCtrl called');
        $scope.url = '@@nodeserver@@:@@nodeport@@/resources/images/'; // where our images live
        $scope.currentIndex = 0; // start at index 0
        $scope.start = true; // display start
        $scope.next = true;  // next button - disable when displaying last question
        $scope.back = false; // back button - ditto for first question
        $scope.gotRight = 0; // counter for correct answers in practice mode
        $scope.answered = 0; // counter for answered questions in quiz mode
        $scope.time = null;  // will be set to time in minutes from config file 
        $scope.timeLeft = null;  // will be set at start and calculated on the basis of records 
        $scope.numQuestions = null; // questions in quiz set
        $scope.questions = null; // array with all the questions
        $scope.disabled = false; // set true on time up, or submit
        $scope.alerts = [];  // holds messages
        $scope.quiz = null; 
        $scope.reloadProblem = false;
        $scope.noConnection = false;
        $scope.startText = null;
        $scope.myQuestion = null;
        initialize(); // call init
    }]);

